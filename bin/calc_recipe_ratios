#!/usr/bin/env python

import sys,os
# Add the root of the repo to the include path.
sys.path.append(os.path.abspath('.'))

import json
from sharpefolio import stocks
from sharpefolio import reports
from sharpefolio import calc
import datetime
import MySQLdb
import argparse

def parseDateArg(string):
    return datetime.datetime.strptime("%s" % string, "%Y-%m-%d").date()

json_data = open('variables.json')
variables = json.load(json_data)

connection = MySQLdb.connect(
    host   = variables['mysql_host'],
    user   = variables['mysql_user'],
    passwd = variables['mysql_password'],
    db     = variables['mysql_database']
)

parser = argparse.ArgumentParser(description='Pick stocks per recipe.')

today = datetime.datetime.now().date()

parser.add_argument('startDate', type = parseDateArg, help = 'The day to start calculating ratios for (further in the past)')
parser.add_argument('--endDate', type = parseDateArg, default = today, help = 'The day to calculate the ratios up to (defaults to today)')

args = parser.parse_args()

startDate = args.startDate
endDate = args.endDate

# Set up stock mapper
stock_repository = stocks.StockMysqlRepository(connection)
stock_mapper = stocks.StockMapper(stock_repository)

# Set up price mapper
price_repository = stocks.RecipePriceMysqlRepository(connection)
price_mapper = stocks.RecipePriceMapper(price_repository)

# Set up ratio mapper
ratio_repository = reports.RecipeRatioMysqlRepository(connection)
ratio_mapper = reports.RecipeRatioMapper(ratio_repository)

# Set up pick mapper
pick_repository = reports.PickMysqlRepository(connection)
pick_mapper = reports.PickMapper(pick_repository)

# Set up recipe mapper
recipe_repository = reports.RecipeMysqlRepository(connection)
recipe_mapper = reports.RecipeMapper(recipe_repository)

print "getting recipes..."
recipes_collection = recipe_mapper.find_all()

for recipe in recipes_collection:

    startDate = args.startDate
    endDate = args.endDate

    while endDate != startDate:

        prices_collection = price_mapper.find_by_recipe_id_until_day(recipe.id, endDate)
        prices = [price.closing_price for price in prices_collection]

        ratio = calc.Ratio(prices)
        sharpe_ratio = ratio.sharpe()

        try:
            ratio_entry = reports.RecipeRatio(recipe.id, sharpe_ratio, endDate.strftime('%Y-%m-%d'))
            ratio_mapper.insert(ratio_entry)
            print 'inserted ratio for recipe: %d for day: %s value: %f' % (recipe.id, endDate.date, sharpe_ratio)
        except Exception:
            print "inserting ratio failed"

        endDate -= datetime.timedelta(days=1)

        # Stop after first day
        # break 

    # Stop after first recipe
    # break

