#!/usr/bin/env python

import sys,os
# Add the root of the repo to the include path.
sys.path.append(os.path.abspath('.'))

import numpy as np
import unittest
from sharpefolio import calc, stocks
import datetime
import math

class TestSequenceFunctions(unittest.TestCase):

    def setUp(self):
        self.prices = {
            "AAPL": [
                stocks.Price(1, datetime.datetime.strptime('2014-08-01', "%Y-%m-%d"), 30, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-02', "%Y-%m-%d"), 40, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-03', "%Y-%m-%d"), 50, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-04', "%Y-%m-%d"), 60, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-05', "%Y-%m-%d"), 70, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-06', "%Y-%m-%d"), 80, 0),
            ],
            "TWTR": [
                stocks.Price(1, datetime.datetime.strptime('2014-08-01', "%Y-%m-%d"), 30, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-02', "%Y-%m-%d"), 40, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-03', "%Y-%m-%d"), 50, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-04', "%Y-%m-%d"), 60, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-05', "%Y-%m-%d"), 70, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-06', "%Y-%m-%d"), 80, 0),
            ],
            "FB"  : [
                stocks.Price(1, datetime.datetime.strptime('2014-08-01', "%Y-%m-%d"), 30, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-02', "%Y-%m-%d"), 40, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-03', "%Y-%m-%d"), 50, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-04', "%Y-%m-%d"), 60, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-05', "%Y-%m-%d"), 70, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-06', "%Y-%m-%d"), 80, 0),
            ],
            "LNKD": [
                stocks.Price(1, datetime.datetime.strptime('2014-08-01', "%Y-%m-%d"), 30, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-02', "%Y-%m-%d"), 40, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-03', "%Y-%m-%d"), 50, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-04', "%Y-%m-%d"), 60, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-05', "%Y-%m-%d"), 70, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-06', "%Y-%m-%d"), 80, 0),
            ],
            "ZNGA": [
                stocks.Price(1, datetime.datetime.strptime('2014-08-01', "%Y-%m-%d"), 30, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-02', "%Y-%m-%d"), 40, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-03', "%Y-%m-%d"), 50, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-04', "%Y-%m-%d"), 60, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-05', "%Y-%m-%d"), 70, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-06', "%Y-%m-%d"), 80, 0),
            ],
            "GRPN": [
                # stocks.Price(1, datetime.datetime.strptime('2014-08-01', "%Y-%m-%d"), 30, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-02', "%Y-%m-%d"), 40, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-03', "%Y-%m-%d"), 50, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-04', "%Y-%m-%d"), 60, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-05', "%Y-%m-%d"), 70, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-06', "%Y-%m-%d"), 80, 0),
            ],
            "IBM" : [
                stocks.Price(1, datetime.datetime.strptime('2014-08-01', "%Y-%m-%d"), 30, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-02', "%Y-%m-%d"), 40, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-03', "%Y-%m-%d"), 50, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-04', "%Y-%m-%d"), 60, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-05', "%Y-%m-%d"), 70, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-06', "%Y-%m-%d"), 80, 0),
            ],
            "MSFT": [
                # stocks.Price(1, datetime.datetime.strptime('2014-08-01', "%Y-%m-%d"), 30, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-02', "%Y-%m-%d"), 40, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-03', "%Y-%m-%d"), 50, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-04', "%Y-%m-%d"), 60, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-05', "%Y-%m-%d"), 70, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-06', "%Y-%m-%d"), 80, 0),
            ],
            "GOOG": [
                stocks.Price(1, datetime.datetime.strptime('2014-08-01', "%Y-%m-%d"), 30, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-02', "%Y-%m-%d"), 40, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-03', "%Y-%m-%d"), 50, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-04', "%Y-%m-%d"), 60, 0),
                stocks.Price(1, datetime.datetime.strptime('2014-08-05', "%Y-%m-%d"), 70, 0),
                # stocks.Price(1, datetime.datetime.strptime('2014-08-06', "%Y-%m-%d"), 80, 0),
            ],
        }

    def test_date_correction(self):
        valid_prices = {'AAPL': [30, 40, 50, 60, 70, 80],
                        'FB': [30, 40, 50, 60, 70, 80],
                        'GOOG': [30, 30, 50, 50, 70, 70],
                        'GRPN': [50, 50, 50, 60, 60, 60],
                        'IBM': [30, 40, 50, 60, 60, 60],
                        'LNKD': [30, 40, 50, 60, 70, 80],
                        'MSFT': [40, 40, 40, 60, 60, 80],
                        'TWTR': [30, 40, 50, 60, 70, 80],
                        'ZNGA': [30, 40, 40, 40, 70, 80]}

        picker = calc.InvertedCorrelationPicker(self.prices)

        # Test if prices is forward / backward filled correctly.
        self.assertEqual(valid_prices, picker.stocks)

    def test_correlation(self):
        picker = calc.InvertedCorrelationPicker(self.prices)
        portfolio_size = 4
        picks = picker.pick(portfolio_size)

        exp_price_len = 6
        exp_stocks_len = 9

        # Test if price length is equal to expected price length.
        self.assertEqual(picker.price_len, exp_price_len)

        # Test if stocks length is equal to expected stocks length.
        self.assertEqual(picker.stocks_len, exp_stocks_len)

        exp_cov_data = np.array(
                        [[ 30., 50., 30., 30., 30., 30., 30., 40., 30.],
                         [ 30., 50., 40., 40., 40., 40., 40., 40., 40.],
                         [ 50., 50., 50., 50., 40., 50., 50., 40., 50.],
                         [ 50., 60., 60., 60., 40., 60., 60., 60., 60.],
                         [ 70., 60., 70., 70., 70., 70., 70., 60., 60.],
                         [ 70., 60., 80., 80., 80., 80., 80., 80., 60.]])

        # Test if covariance index is same as expected.
        self.assertEqual(picker.cov_data.all(), exp_cov_data.all())

        exp_cormat = np.array(
                        [[ 1.        , 0.81649658, 0.95618289, 0.95618289, 0.89442719, 0.95618289, 0.95618289, 0.82158384, 0.88388348],
                         [ 0.81649658, 1.        , 0.87831007, 0.87831007, 0.73029674, 0.87831007, 0.87831007, 0.89442719, 0.8660254 ],
                         [ 0.95618289, 0.87831007, 1.        , 1.        , 0.90868822, 1.        , 1.        , 0.91651514, 0.92966968],
                         [ 0.95618289, 0.87831007, 1.        , 1.        , 0.90868822, 1.        , 1.        , 0.91651514, 0.92966968],
                         [ 0.89442719, 0.73029674, 0.90868822, 0.90868822, 1.        , 0.90868822, 0.90868822, 0.85732141, 0.71151247],
                         [ 0.95618289, 0.87831007, 1.        , 1.        , 0.90868822, 1.        , 1.        , 0.91651514, 0.92966968],
                         [ 0.95618289, 0.87831007, 1.        , 1.        , 0.90868822, 1.        , 1.        , 0.91651514, 0.92966968],
                         [ 0.82158384, 0.89442719, 0.91651514, 0.91651514, 0.85732141, 0.91651514, 0.91651514, 1.        , 0.77459667],
                         [ 0.88388348, 0.8660254 , 0.92966968, 0.92966968, 0.71151247, 0.92966968, 0.92966968, 0.77459667, 1.        ]])

        # Test if correlation matrix is same as expected.
        self.assertEqual(picker.cormat.all(), exp_cormat.all())

        exp_portfolio_combinations =[
                                     (0, 1, 2, 3), (0, 1, 2, 4), (0, 1, 2, 5), (0, 1, 2, 6), (0, 1, 2, 7), (0, 1, 2, 8), (0, 1, 3, 4), (0, 1, 3, 5),
                                     (0, 1, 3, 6), (0, 1, 3, 7), (0, 1, 3, 8), (0, 1, 4, 5), (0, 1, 4, 6), (0, 1, 4, 7), (0, 1, 4, 8), (0, 1, 5, 6),
                                     (0, 1, 5, 7), (0, 1, 5, 8), (0, 1, 6, 7), (0, 1, 6, 8), (0, 1, 7, 8), (0, 2, 3, 4), (0, 2, 3, 5), (0, 2, 3, 6),
                                     (0, 2, 3, 7), (0, 2, 3, 8), (0, 2, 4, 5), (0, 2, 4, 6), (0, 2, 4, 7), (0, 2, 4, 8), (0, 2, 5, 6), (0, 2, 5, 7),
                                     (0, 2, 5, 8), (0, 2, 6, 7), (0, 2, 6, 8), (0, 2, 7, 8), (0, 3, 4, 5), (0, 3, 4, 6), (0, 3, 4, 7), (0, 3, 4, 8),
                                     (0, 3, 5, 6), (0, 3, 5, 7), (0, 3, 5, 8), (0, 3, 6, 7), (0, 3, 6, 8), (0, 3, 7, 8), (0, 4, 5, 6), (0, 4, 5, 7),
                                     (0, 4, 5, 8), (0, 4, 6, 7), (0, 4, 6, 8), (0, 4, 7, 8), (0, 5, 6, 7), (0, 5, 6, 8), (0, 5, 7, 8), (0, 6, 7, 8),
                                     (1, 2, 3, 4), (1, 2, 3, 5), (1, 2, 3, 6), (1, 2, 3, 7), (1, 2, 3, 8), (1, 2, 4, 5), (1, 2, 4, 6), (1, 2, 4, 7),
                                     (1, 2, 4, 8), (1, 2, 5, 6), (1, 2, 5, 7), (1, 2, 5, 8), (1, 2, 6, 7), (1, 2, 6, 8), (1, 2, 7, 8), (1, 3, 4, 5),
                                     (1, 3, 4, 6), (1, 3, 4, 7), (1, 3, 4, 8), (1, 3, 5, 6), (1, 3, 5, 7), (1, 3, 5, 8), (1, 3, 6, 7), (1, 3, 6, 8),
                                     (1, 3, 7, 8), (1, 4, 5, 6), (1, 4, 5, 7), (1, 4, 5, 8), (1, 4, 6, 7), (1, 4, 6, 8), (1, 4, 7, 8), (1, 5, 6, 7),
                                     (1, 5, 6, 8), (1, 5, 7, 8), (1, 6, 7, 8), (2, 3, 4, 5), (2, 3, 4, 6), (2, 3, 4, 7), (2, 3, 4, 8), (2, 3, 5, 6),
                                     (2, 3, 5, 7), (2, 3, 5, 8), (2, 3, 6, 7), (2, 3, 6, 8), (2, 3, 7, 8), (2, 4, 5, 6), (2, 4, 5, 7), (2, 4, 5, 8),
                                     (2, 4, 6, 7), (2, 4, 6, 8), (2, 4, 7, 8), (2, 5, 6, 7), (2, 5, 6, 8), (2, 5, 7, 8), (2, 6, 7, 8), (3, 4, 5, 6),
                                     (3, 4, 5, 7), (3, 4, 5, 8), (3, 4, 6, 7), (3, 4, 6, 8), (3, 4, 7, 8), (3, 5, 6, 7), (3, 5, 6, 8), (3, 5, 7, 8),
                                     (3, 6, 7, 8), (4, 5, 6, 7), (4, 5, 6, 8), (4, 5, 7, 8), (4, 6, 7, 8), (5, 6, 7, 8)]
        
        # Test if number of combinations is same as expected.
        self.assertEqual(len(picker.portfolios), math.factorial(picker.stocks_len)/(math.factorial(portfolio_size)*math.factorial(picker.stocks_len-portfolio_size)))

        # Test if combinations are same as expected.
        self.assertEqual(picker.portfolios, exp_portfolio_combinations)

        exp_total_corr = [5.4854824871701151, 5.1844016908913009, 5.4854824871701151, 5.4854824871701151, 5.2835157002977544,
                         5.3305680945179112, 5.1844016908913009, 5.4854824871701151, 5.4854824871701151, 5.2835157002977544,
                         5.3305680945179112, 5.1844016908913009, 5.1844016908913009, 5.0145529524996411, 4.9026418690733715,
                         5.4854824871701151, 5.2835157002977544, 5.3305680945179112, 5.2835157002977544, 5.3305680945179112,
                         5.057013157694497,  5.6241694109394311, 5.8685486624025449, 5.8685486624025449, 5.5669798891751157,
                         5.6555886118209511, 5.624169410939432,  5.624169410939432,  5.3547186861927036, 5.2843639311921118,
                         5.8685486624025449, 5.5669798891751157, 5.6555886118209511, 5.5669798891751157, 5.6555886118209511,
                         5.2824316886424674, 5.624169410939432,  5.624169410939432,  5.3547186861927036, 5.2843639311921118,
                         5.8685486624025449, 5.5669798891751157, 5.6555886118209511, 5.5669798891751157, 5.6555886118209511,
                         5.2824316886424674, 5.624169410939432,  5.3547186861927036, 5.2843639311921127, 5.3547186861927036,
                         5.2843639311921127, 4.9433250564943307, 5.5669798891751157, 5.6555886118209511, 5.2824316886424674,
                         5.2824316886424674, 5.304293319652067,  5.6349301969610393, 5.6349301969610393, 5.4840776002896119, 
                         5.4819848954945343, 5.304293319652067,  5.304293319652067,  5.1855587714613405, 5.0245025890198356,
                         5.6349301969610393, 5.4840776002896119, 5.4819848954945343, 5.4840776002896119, 5.4819848954945343,
                         5.2595441488720533, 5.304293319652067,  5.304293319652067,  5.1855587714613405, 5.0245025890198356,
                         5.6349301969610393, 5.4840776002896119, 5.4819848954945343, 5.4840776002896119, 5.4819848954945343,
                         5.2595441488720533, 5.304293319652067,  5.1855587714613405, 5.0245025890198356, 5.1855587714613405,
                         5.0245025890198356, 4.8341798908780564, 5.4840776002896119, 5.4819848954945343, 5.2595441488720533,
                         5.2595441488720533, 5.726064667506729,  5.726064667506729,  5.507728132960934,  5.3882282789451077, 
                         6.0,                5.7495454169735041, 5.789009040604105,  5.7495454169735041, 5.789009040604105,
                         5.4669663076265556, 5.726064667506729,  5.507728132960934,  5.3882282789451086, 5.507728132960934,
                         5.3882282789451086, 5.09830359444826,   5.7495454169735041, 5.789009040604105,  5.4669663076265556,
                         5.4669663076265556, 5.726064667506729,  5.507728132960934,  5.3882282789451086, 5.507728132960934,
                         5.3882282789451086, 5.09830359444826,   5.7495454169735041, 5.789009040604105,  5.4669663076265556,
                         5.4669663076265556, 5.5077281329609349, 5.3882282789451068, 5.09830359444826,   5.09830359444826,
                         5.4669663076265556]

        # Test if sums of all correlations for each combination is same as expected.
        self.assertEqual(picker.total_corr, exp_total_corr)
        
        exp_picks = ['GRPN', 'ZNGA', 'MSFT', 'IBM']

        # Test if picks are same as expected.
        self.assertEqual(picks, exp_picks)

if __name__ == '__main__':
    unittest.main()