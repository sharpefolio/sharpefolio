#!/usr/bin/env python

# Calculate ratios for each recipe duration.

import sys,os
# Add the root of the repo to the include path.
sys.path.append(os.path.abspath('.'))

import json
import MySQLdb
# from datetime import datetime
from sharpefolio import stocks
from sharpefolio import reports
from sharpefolio import calc

json_data = open('variables.json')
variables = json.load(json_data)

connection = MySQLdb.connect(
    host   = variables['mysql_host'],
    user   = variables['mysql_user'],
    passwd = variables['mysql_password'],
    db     = variables['mysql_database']
)

report_repository = reports.ReportMysqlRepository(connection)
report_mapper = reports.ReportMapper(report_repository)

# Set up stock mapper
stock_repository = stocks.StockMysqlRepository(connection)
stock_mapper = stocks.StockMapper(stock_repository)

# Set up price mapper
price_repository = stocks.PriceMysqlRepository(connection)
price_mapper = stocks.PriceMapper(price_repository)

# Set up recipe mapper
recipe_repository = reports.RecipeMysqlRepository(connection)
recipe_mapper = reports.RecipeMapper(recipe_repository)

# Set up ratio mapper
ratio_repository = reports.RatioMysqlRepository(connection)
ratio_mapper = reports.RatioMapper(ratio_repository)

recipes_collection = recipe_mapper.find_all()

for recipe in recipes_collection.loop():

	stocks_collection = stock_mapper.find_all()
	for stock in stocks_collection.loop():
		prices_collection = price_mapper.find_by_stock_id_in_range(stock.id, start_date, end_date)
		prices = [price.closing_price for price in prices_collection.loop()]

		ratio = calc.Ratio(prices)
		if (recipe.report_formula == 'sharpe'):
			value = ratio.sharpe()
		else:
			value = ratio.sortino()

		# print 'calculating %s ratio %d for %s (%s - %d days): %f' % (report.formula, report.id, stock.symbol, report.date, report.duration, value)

		ratio_entry = reports.Ratio(stock.id, report.id, value)
		ratio_mapper.insert(ratio_entry)
