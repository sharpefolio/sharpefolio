#!/usr/bin/env python

# Calculate ratios for each recipe duration.

import sys,os
# Add the root of the repo to the include path.
sys.path.append(os.path.abspath('.'))

import json
import MySQLdb
from sharpefolio import stocks, reports, calc, benchmarks
import datetime

json_data = open('variables.json')
variables = json.load(json_data)

connection = MySQLdb.connect(
    host   = variables['mysql_host'],
    user   = variables['mysql_user'],
    passwd = variables['mysql_password'],
    db     = variables['mysql_database']
)

report_repository = reports.ReportMysqlRepository(connection)
report_mapper = reports.ReportMapper(report_repository)

# Set up stock mapper
stock_repository = stocks.StockMysqlRepository(connection)
stock_mapper = stocks.StockMapper(stock_repository)

# Set up price mapper
price_repository = stocks.PriceMysqlRepository(connection)
price_mapper = stocks.PriceMapper(price_repository)

# Set up recipe mapper
recipe_repository = reports.RecipeMysqlRepository(connection)
recipe_mapper = reports.RecipeMapper(recipe_repository)

# Set up ratio mapper
ratio_repository = reports.RatioMysqlRepository(connection)
ratio_mapper = reports.RatioMapper(ratio_repository)

# Set up benchmark mapper
benchmark_repository = benchmarks.PriceMysqlRepository(connection)
benchmark_mapper = benchmarks.PriceMapper(benchmark_repository)

recipes_collection = recipe_mapper.find_all()
stocks_collection = stock_mapper.find_all()

two_yrs_ago = datetime.datetime.now().date() - datetime.timedelta(days=5*52*2)
print "until:", two_yrs_ago

for recipe in recipes_collection.loop():

    today = datetime.datetime.now().date()

    while today != two_yrs_ago:

        for stock in stocks_collection.loop():
            prices_collection = price_mapper.find_by_stock_id_until_day(stock.id, today, limit=recipe.report_duration)
            prices = [price.closing_price for price in prices_collection.loop()]
            price_dates = [price.date for price in prices_collection.loop()]

            first_price = None
            for price in prices_collection.loop():
                first_price = price
                break

            if first_price == None:
                print 'no prices found for recipe: %d for stock: %d for day %s' % (recipe.id, stock.id, today)
                continue

            benchmark_prices = None
            if recipe.check_benchmark_id > 0:
                benchmark_collection = benchmark_mapper.find_by_benchmark_id_until_day(recipe.check_benchmark_id, today, limit=recipe.report_duration)
                benchmark_prices = [price.closing_price for price in benchmark_collection.loop()]
                benchmark_dates = [price.date for price in benchmark_collection.loop()]

                if price_dates != benchmark_dates:
                    print "no suitable benchmarks found"
                    benchmark_prices = None

            ratio = calc.Ratio(prices, benchmark_prices)
            if (recipe.report_formula == 'sharpe'):
                value = ratio.sharpe()
            else:
                value = ratio.sortino()

            ratio_entry = reports.Ratio(stock.id, recipe.id, value, first_price.date.strftime('%Y-%m-%d'))

            try:
                ratio_mapper.insert(ratio_entry)
                print 'inserted recipe: %d for stock: %d for day: %s value: %f' % (recipe.id, stock.id, first_price.date, value)
            except Exception, e:
                print 'error inserting recipe: %d for stock: %d for day: %s (%s)' % (recipe.id, stock.id, first_price.date, e)
                pass

            today -= datetime.timedelta(days=1)

            # Only do 1 stock for now.
            break

    # Only do 1 recipe for now.
    # break

    
    # stocks_collection = stock_mapper.find_all()
    # for stock in stocks_collection.loop():
    # 	prices_collection = price_mapper.find_by_stock_id_in_range(stock.id, start_date, end_date)
    # 	prices = [price.closing_price for price in prices_collection.loop()]


