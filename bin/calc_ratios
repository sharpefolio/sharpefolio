#!/usr/bin/env python

# Calculate ratios for each recipe duration.

import sys,os
# Add the root of the repo to the include path.
sys.path.append(os.path.abspath('.'))

import json
import MySQLdb
import datetime
import argparse
from sharpefolio import stocks, reports, calc, benchmarks

def parseDateArg(string):
    return datetime.datetime.strptime("%s" % string, "%Y-%m-%d").date()

json_data = open('variables.json')
variables = json.load(json_data)

connection = MySQLdb.connect(
    host   = variables['mysql_host'],
    user   = variables['mysql_user'],
    passwd = variables['mysql_password'],
    db     = variables['mysql_database']
)

parser = argparse.ArgumentParser(description='Calculate ratios.')

today = datetime.datetime.now().date()

parser.add_argument('startDate', type = parseDateArg, help = 'The day to start calculating ratios for (further in the past)')
parser.add_argument('--endDate', type = parseDateArg, default = today, help = 'The day to calculate the ratios up to (defaults to today)')
parser.add_argument('--recipeStart', type = int, default = None, help = 'The recipe id to start at.')
parser.add_argument('--recipeEnd',   type = int, default = None, help = 'The recipe id to end at.')
parser.add_argument('--batchSize',   type = int, default = 1000, help = 'How big to batch the inserts.')

args = parser.parse_args()

startDate = args.startDate
endDate = args.endDate

report_repository = reports.ReportMysqlRepository(connection)
report_mapper = reports.ReportMapper(report_repository)

# Set up stock mapper
stock_repository = stocks.StockMysqlRepository(connection)
stock_mapper = stocks.StockMapper(stock_repository)

# Set up price mapper
price_repository = stocks.PriceMysqlRepository(connection)
price_mapper = stocks.PriceMapper(price_repository)

# Set up recipe mapper
recipe_repository = reports.RecipeMysqlRepository(connection)
recipe_mapper = reports.RecipeMapper(recipe_repository)

# Set up ratio mapper
ratio_repository = reports.RatioMysqlRepository(connection)
ratio_mapper = reports.RatioMapper(ratio_repository)

# Set up benchmark mapper
benchmark_repository = benchmarks.PriceMysqlRepository(connection)
benchmark_mapper = benchmarks.PriceMapper(benchmark_repository)

recipes_collection = recipe_mapper.find_all_ratio_combos()
stocks_collection = stock_mapper.find_all()

print "until:", startDate

ratio_stack = []

for recipe in recipes_collection.loop():

    if args.recipeStart and recipe.id < args.recipeStart:
        print 'skipping recipe (recipeStart) ', recipe.id
        continue

    if args.recipeEnd and recipe.id > args.recipeEnd:
        print 'skipping recipe (recipeEnd) ', recipe.id
        continue

    # Reset the date for every recipe
    endDate = args.endDate

    while endDate >= startDate:

        if endDate.weekday() >= 5:
            endDate -= datetime.timedelta(days=1)
            continue

        for stock in stocks_collection.loop():
            try:
                prices_collection = price_mapper.find_by_stock_id_until_day(stock.id, endDate, limit=recipe.report_duration)
                prices = [price.closing_price for price in prices_collection]
                price_dates = [price.date for price in prices_collection]
            except Exception:
                print 'no prices found for report_duration: %d report_formula: %s check_benchmark_id: %d for stock: %d for day %s' % (recipe.report_duration, recipe.report_formula, recipe.check_benchmark_id, stock.id, endDate)
                continue

            first_price = None
            for price in prices_collection:
                first_price = price
                break

            if first_price == None:
                print 'no prices found for report_duration: %d report_formula: %s check_benchmark_id: %d for stock: %d for day %s' % (recipe.report_duration, recipe.report_formula, recipe.check_benchmark_id, stock.id, endDate)
                continue

            benchmark_prices = None
            if recipe.check_benchmark_id > 0:
                benchmark_collection = benchmark_mapper.find_by_benchmark_id_until_day(recipe.check_benchmark_id, endDate, limit=recipe.report_duration)
                benchmark_prices = [price.closing_price for price in benchmark_collection]
                benchmark_dates = [price.date for price in benchmark_collection]

                if price_dates != benchmark_dates:
                    print "no suitable benchmarks found"
                    benchmark_prices = None

            ratio = calc.Ratio(prices, benchmark_prices)
            if (recipe.report_formula == 'sharpe'):
                value = ratio.sharpe()
            else:
                value = ratio.sortino()

            ratio_entry = reports.Ratio(stock_id=stock.id, 
                                        report_duration=recipe.report_duration, 
                                        report_formula=recipe.report_formula, 
                                        check_benchmark_id=recipe.check_benchmark_id, 
                                        ratio=value, 
                                        date=first_price.date.strftime('%Y-%m-%d'))

            try:
                print 'prepared report_duration: %d report_formula: %s check_benchmark_id: %d for stock: %d for day: %s value: %f' % (recipe.report_duration, recipe.report_formula, recipe.check_benchmark_id, stock.id, first_price.date, value)
                ratio_stack.append(ratio_entry)
                if len(ratio_stack) >= 100:
                    ratio_mapper.batch_insert(ratio_stack)
                    ratio_stack[:] = []
                    print 'FLUSHED IT'
            except Exception, e:
                ratio_stack[:] = []
                print 'FLUSHED IT ANYWAY'
                print 'error inserting report_duration: %d report_formula: %s check_benchmark_id: %d for stock: %d for day: %s (%s)' % (recipe.report_duration, recipe.report_formula, recipe.check_benchmark_id, stock.id, first_price.date, e)
                pass

        endDate -= datetime.timedelta(days=1)
        ratio_mapper.batch_insert(ratio_stack)
        ratio_stack[:] = []
        print 'FLUSHED IT'

            # Only do 1 stock for now.
            # break

    # Only do 1 recipe for now.
    # break


    # stocks_collection = stock_mapper.find_all()
    # for stock in stocks_collection:
    # 	prices_collection = price_mapper.find_by_stock_id_in_range(stock.id, start_date, end_date)
    # 	prices = [price.closing_price for price in prices_collection]


