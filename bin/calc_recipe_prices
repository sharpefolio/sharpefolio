#!/usr/bin/env python

import sys,os
# Add the root of the repo to the include path.
sys.path.append(os.path.abspath('.'))

import json
from sharpefolio import stocks
from sharpefolio import reports
from sharpefolio import calc
import datetime
import MySQLdb
import argparse

def parseDateArg(string):
    return datetime.datetime.strptime("%s" % string, "%Y-%m-%d").date()

json_data = open('variables.json')
variables = json.load(json_data)

connection = MySQLdb.connect(
    host   = variables['mysql_host'],
    user   = variables['mysql_user'],
    passwd = variables['mysql_password'],
    db     = variables['mysql_database']
)

parser = argparse.ArgumentParser(description='Calculate prices per recipe.')

today = datetime.datetime.now().date()

parser.add_argument('startDate', type = parseDateArg, help = 'The day to start calculating ratios for (further in the past)')
parser.add_argument('--endDate', type = parseDateArg, default = today, help = 'The day to calculate the ratios up to (defaults to today)')

args = parser.parse_args()

startDate = args.startDate
endDate = args.endDate

# Set up stock mapper
stock_repository = stocks.StockMysqlRepository(connection)
stock_mapper = stocks.StockMapper(stock_repository)

# Set up price mapper
price_repository = reports.RecipePriceMysqlRepository(connection)
price_mapper = reports.RecipePriceMapper(price_repository)

# Set up pick mapper
pick_repository = reports.PickMysqlRepository(connection)
pick_mapper = reports.PickMapper(pick_repository)

# Set up recipe mapper
recipe_repository = reports.RecipeMysqlRepository(connection)
recipe_mapper = reports.RecipeMapper(recipe_repository)

print "getting recipes..."
recipes_collection = recipe_mapper.find_all()

for recipe in recipes_collection:

    startDate = args.startDate
    endDate = args.endDate

    recipe_index = 1000

    while startDate <= endDate:

        picks = pick_mapper.get_picks_for_recipe(recipe.id, startDate)

        if picks.count() == 0:
            print "no stock pick data for recipe: %d and day: %s" % (recipe.id, startDate)
            startDate += datetime.timedelta(days=1)
            continue

        gain = 0
        for pick in picks:
            gain += ((pick.gain - 1) * pick.weight)

        print "recipe_index:", recipe_index, "*", 1 + gain
        recipe_index *= 1 + gain
        print "=", recipe_index

        try:
            price = reports.RecipePrice(recipe.id, startDate, recipe_index)
            price_mapper.insert(price)
            print "inserted recipe index:", recipe_index, "with recipe id", recipe.id, "and price", price, "for:", startDate
        except Exception, e:
            print 'error inserting recipe index for recipe: %d for day: %s (%s)' % (recipe.id, endDate, e)
            pass

        startDate += datetime.timedelta(days=1)


